/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
// Keywords
TOKEN: 
{
  <ROBOT_R: "ROBOT_R"> 
|  <VARS: "VARS"> 
|  <PROCS: "PROCS"> 
|  <IF: "if"> 
|  <THEN: "then"> 
|  <ELSE: "else"> 
|  <WHILE: "while"> 
|  <DO: "do"> 
|  <REPEAT: "repeat"> 
}

// Commands
TOKEN: 
{
<ASSIGNTO: "assignTo"> 
|  <GOTO: "goto"> 
|  <MOVE: "move"> 
|  <TURN: "turn"> 
|  <FACE: "face"> 
|  <PUT: "put"> 
|  <PICK: "pick"> 
|  <MOVE_TO_THE: "moveToThe"> 
|  <MOVE_IN_DIR: "moveInDir"> 
|  <JUMP_TO_THE: "jumpToThe"> 
|  <JUMP_IN_DIR: "jumpInDir"> 
|  <NOP: "nop"> 
|  <POP: "pop"> 
|  <HOP: "hop"> 
|  <GO: "go"> }


// Conditions
TOKEN: 
{
 <FACING: "facing"> 
|  <CAN_PUT: "canPut"> 
|  <CAN_PICK: "canPick"> 
|  <CAN_MOVE_IN_DIR: "canMoveInDir"> 
|  <CAN_JUMP_IN_DIR: "canJumpInDir"> 
|  <CAN_MOVE_TO_THE: "canMoveToThe"> 
|  <CAN_JUMP_TO_THE: "canJumpToThe"> 
|  <NOT: "not"> 
}

// Other tokens
TOKEN: 
{

   <RIGHT: "right"> 
|  <LPAREN: "("> 
|  <RPAREN: ")"> 
|  <LBRACKET: "["> 
|  <RBRACKET: "]"> 
|  <COMMA: ","> 
|  <SEMICOLON: ";"> 
|  <NUMBER: (["0"-"9"])+> 
|  <IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9"])*> 
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	